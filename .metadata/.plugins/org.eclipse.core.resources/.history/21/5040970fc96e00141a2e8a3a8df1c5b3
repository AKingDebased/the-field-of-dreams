### recursion and the stack

* if ever i reference a closing symbol, take that to mean ) or ]

##### SymbolBalancer.java

*  `SymbolBalancer.java` has been declared as final, and `isBalanced` is static.  i figured there is no need to instantiate an instance of SymbolBalancer, and so, static. 

* in the case of a closing symbol calling a pop over an empty stack, `SymbolBalancer` will throw a `NoSuchElementException`.  to handle this case, a try-catch block has been implemented that immediately returns false if ever a closing symbol tries to pop an empty stack.

##### FibonacciRecursor.java

* i'm not gonna lie to you here, you can find this fibonacci code anywhere on the internet.  it
seems like that standard way to do it.  I SWEAR IT'S IDIOMATIC NOT PLAGIARISM.

* this is a "static class", same as `SymbolBalancer.java`.  