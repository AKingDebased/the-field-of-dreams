### Custom Collection

* CC just stands for Custom Collection.
* i omitted iteration unit tests.  rather, my App class features a for-each loop over all
of my CustomCollection implementations.  twofold reasons for this: one, to test my iterator and its functionality.  two, to actually put my iterators to work, because otherwise the things would
be rusting unburnished.
* also i'm pretty sure this assignment was a sneaky, subtle lesson in polymorphism.  oh, mike,
you cheeky devil.

##### on maven and compiling

* you gave us the option to leave maven behind and go back to our old way of doing things.  well, 
i went back to my old way, which is eclipse.  BUT I GOT THE MAVEN PLUG-IN BITCHES I CAN DO ANYTHING. less flippantly, you'll be able to run my program like a maven-built project because it is, in fact, a maven built project.

##### CCAbstract (i.e., why i am using an abstract class)

* every implementation of `CCAbstract` maintains a private `maxLength` variable.  this represents
 the maximum length of the collection as instantiated by the user. this is in contrast to, 
 say, the CCList's use of `size()`, which comes from the Java ArrayList docs and represents 
 the number of elements in the CCList.  since i had a variable i wanted all implementations of the 
 Custom Collection to have, i settled on an abstract class (rather than an interface).
 
##### LinkedLists and the third implementation

* my third implementation is constructed upon LinkedLists. i ran unit tests with both an ArrayList 
and LinkedList infrastructure, and they both executed at exactly the same speed.  however, i have
heard tell that for insertion and deletion LinkedLists perform at (O(1)) while ArrayLists perform 
at (O(n)).  since one of the main features of the CustomCollection is inserting new indices and deleting old indices, i figured i'd stick with linked lists. in a system this small the difference is incredibly negligible, but i like to program with expansion in mind.
 
##### on magic numbers, for loops, and unit testing

* a lot of the for loops in my unit tests use hard coded numbers rather than references to a list's
maximum length.  i figured i could allow the evil just this once rather than going in and coding
a `getMaxLength()` method that would only be used for testing purposes.

##### on iterators

* `CCList` does not have an associated `CCListIterator` class.  this is on account of `CCList` being based on an ArrayList, which comes with a perfectly serviceable iterator by the boys behind Java.