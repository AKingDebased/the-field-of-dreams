package edu.lmu.cmsi.tree;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Queue;

import edu.lmu.cmsi.tree.exception.DuplicateItemException;
import edu.lmu.cmsi.tree.exception.ItemNotFoundException;
import edu.lmu.cmsi.tree.node.BinaryTreeNode;

public class IntegerBinarySearchTree {
	private static Integer[] EMPTY_TREE = {};
	protected BinaryTreeNode root;

	public IntegerBinarySearchTree() {
		this.root = null;
	}

	/**
	 * Insert into the tree.
	 *
	 * @param x the item to insert.
	 * @throws edu.lmu.cmsi.tree.exception.DuplicateItemException if x exists.
	 */
	public void insert(int x) {
		if (root == null){
			root = new BinaryTreeNode(x);
		}else if (this.contains(x)){
			throw new DuplicateItemException("argument already exists in tree");
		}else {
			insert(x,root);
		}
	}
	
	private void insert(int value, BinaryTreeNode currentNode){
		if(value < currentNode.getValue()){
			if(currentNode.getLeft() != null){
				insert(value, currentNode.getLeft());
			} else {
				BinaryTreeNode newNode = new BinaryTreeNode(value);
				currentNode.setLeft(newNode);
			}
		} else if (value > currentNode.getValue()){
			if(currentNode.getRight() != null){
				insert(value, currentNode.getRight());
			} else {
				BinaryTreeNode newNode = new BinaryTreeNode(value);
				currentNode.setRight(newNode);
			}
		}
	}

	/**
	 * Find the smallest item in the tree.
	 *
	 * @return smallest item or throws an exception if the tree is empty.
	 * @throws edu.lmu.cmsi.tree.exception.ItemNotFoundException
	 *
	 */
	public int findSmallestValue() {
		if (root != null){
			return recursiveSmallestValue(root);
		} throw new ItemNotFoundException("tree must have elements");
	}
	
	private int recursiveSmallestValue(BinaryTreeNode currentNode){
		if(currentNode.getLeft() == null){
			return currentNode.getValue();
		} else {
			return recursiveSmallestValue(currentNode.getLeft());
		}
	}
	
	/**
	 * Find the largest item in the tree.
	 *
	 * @return the largest item or throws an exception if the tree is empty.
	 * @throws edu.lmu.cmsi.tree.exception.ItemNotFoundException
	 *
	 */
	public int findLargestValue() {
		if (root != null){
			return recursiveLargestValue(root);
		} throw new ItemNotFoundException("tree must have elements");
	}
	
	private int recursiveLargestValue(BinaryTreeNode currentNode){
		if(currentNode.getRight() == null){
			return currentNode.getValue();
		} else {
			return recursiveSmallestValue(currentNode.getRight());
		}
	}

	/**
	 * Returns whether or not the value exists in the tree
	 *
	 * @return true if the value exists, false otherwise
	 */
	public boolean contains(int value) {
		return Arrays.asList(this.toInOrder()).contains(value);
	}

	/**
	 * Returns an preorder-traversed array
	 *
	 * @return an array of Integers, or empty if the tree is empty.
	 */
	public Integer[] toPreOrder() {
		if(root == null){
			return EMPTY_TREE;
		}
		
		ArrayList<Integer> valueList = new ArrayList<Integer>();
		
		recursivePreOrder(valueList, root);
		
		return valueList.toArray(new Integer[valueList.size()]);
	}
	
	private void recursivePreOrder(ArrayList<Integer> valueList, BinaryTreeNode currentNode){
		valueList.add(currentNode.getValue());
		
		if(currentNode.getLeft() != null){
			recursivePreOrder(valueList, currentNode.getLeft());
		}
		
		if(currentNode.getRight() != null){
			recursivePreOrder(valueList, currentNode.getRight());
		}
	}
	
	/**
	 * Returns an inorder-traversed array
	 *
	 * @return an array of Integers, or empty if the tree is empty.
	 */
	public Integer[] toInOrder() {
		if(root == null) return EMPTY_TREE;
		
		ArrayList<Integer> valueList = new ArrayList<Integer>();
		
		recursiveInOrder(valueList, root);
		
		
		return valueList.toArray(new Integer[valueList.size()]);
	}
	
	private void recursiveInOrder(ArrayList<Integer> valueList, BinaryTreeNode currentNode){
		if(currentNode.getLeft() != null){
			recursiveInOrder(valueList, currentNode.getLeft());
		}
		
		valueList.add(currentNode.getValue());
		
		if(currentNode.getRight() != null){
			recursiveInOrder(valueList, currentNode.getRight());
		}
	}

	/**
	 * Returns an postorder-traversed array
	 *
	 * @return an array of Integers, or empty if the tree is empty.
	 */
	public Integer[] toPostOrder() {
		if(root == null) return EMPTY_TREE;
		
		ArrayList<Integer> valueList = new ArrayList<Integer>();
		
		recursivePostOrder(valueList, root);
		
		return valueList.toArray(new Integer[valueList.size()]);
	}
	
	private void recursivePostOrder(ArrayList<Integer> valueList, BinaryTreeNode currentNode){
		if(currentNode.getLeft() != null){
			recursivePostOrder(valueList, currentNode.getLeft());
		}
		
		if(currentNode.getRight() != null){
			recursivePostOrder(valueList, currentNode.getRight());
		}
		
		valueList.add(currentNode.getValue());
	}

	/**
	 * Returns an Breadth First-traversed array
	 *
	 * @return an array of Integers, or empty if the tree is empty.
	 */
	public Integer[] toBreadthFirstOrder() {
		 if (root == null) return EMPTY_TREE;
		 
		 ArrayList<Integer> valueList = new ArrayList<Integer>();
		 BinaryTreeNode node = root;
		 Queue<BinaryTreeNode> breadthQueue = new ArrayDeque<BinaryTreeNode>();
		 
		 breadthQueue.add(node);
		 
		 while(breadthQueue.size() > 0)
		{
			 node = breadthQueue.remove();
			 valueList.add(node.getValue());
			 
			 if (node.getLeft() != null){
				 breadthQueue.add(node.getLeft());
			 }
			 
			 if (node.getRight() != null){
				 breadthQueue.add(node.getRight());
			 }
		 }
		 
		 return valueList.toArray(new Integer[valueList.size()]);
	}
}